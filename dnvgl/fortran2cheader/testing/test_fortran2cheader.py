"""Unit tests for Fortran2CHeader."""

import re

import pytest

from dnvgl.fortran2cheader import _ARGS, _BIND, _VARTYPE, _SUBROUTINE, Fortran2CHeader

__date__ = "2024/10/20 17:59:20 hoel"
__copyright__ = "Copyright Â© 2014 by DNV GL SE"


@pytest.fixture
def hStringIO(tmp_path):
    return tmp_path / "test.h"


@pytest.fixture
def pxdStringIO(tmp_path):
    return tmp_path / "test.pxd"


@pytest.fixture
def mlist(tmp_path):
    return tmp_path / "test.h"


def test_c_int():
    res = _VARTYPE.match("INTEGER(C_INT), INTENT(IN), VALUE :: iUnit")
    assert res.groupdict() == {
        "kind": "C_INT",
        "ftype": "INTEGER",
        "args": "iUnit",
        "modifier": ", INTENT(IN), VALUE ",
        "length": None,
    }


def test_character_1():
    res = _VARTYPE.match("character(kind=c_char), intent(in) :: s(*)")
    assert res.groupdict() == {
        "kind": "c_char",
        "ftype": "character",
        "args": "s",
        "modifier": ", intent(in) ",
        "length": None,
    }


def test_character_2():
    res = _VARTYPE.match("character(kind=c_char,len=1), intent(in) :: s(*)")
    assert res.groupdict() == {
        "kind": "c_char",
        "ftype": "character",
        "args": "s",
        "modifier": ", intent(in) ",
        "length": "1",
    }


def test_character_3():
    res = _VARTYPE.match("character(kind=c_char,len=1), dimension(*), intent(in) :: s")
    assert res.groupdict() == {
        "kind": "c_char",
        "ftype": "character",
        "args": "s",
        "modifier": ", dimension(*), intent(in) ",
        "length": "1",
    }


def test_args_1():
    assert re.compile(_ARGS, re.VERBOSE).match("(s)")


def test_bind_1():
    assert re.compile(_BIND, re.VERBOSE).match("bind(c,name='pstr')")


def test_subr_1():
    assert _SUBROUTINE.match("subroutine pstr(s) bind(c,name='pstr')")


def test_subr_2(mlist, hStringIO, pxdStringIO):
    i_data = """
subroutine pstr(s) bind(c,name='pstr')
  use iso_c_binding ! C bindings
  character(kind=c_char,len=1), intent(in) :: &
     & s(*)
end subroutine pstr
"""
    exp = """\
/*
  test.h
  Header file generated from parsing ISO_C_BINDING information
  from test.h.

  Generated by setup.py, version xx.
 */

#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
  pstr
  Generated from FORTRAN routine 'pstr'
  FORTRAN declaration:
      subroutine pstr(s) bind(c,name='pstr')
 */
extern void pstr(const char* s);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /* TEST_H */"""

    exp_pxd = """#
# test.pxd
# Cython Header file generated from parsing ISO_C_BINDING information
# from <generator object <genexpr> at 0x????????????>.
#
# Generated by setup.py, version xx.

cdef extern from "test.h" nogil:
# pstr
# Generated from FORTRAN routine 'pstr'
# FORTRAN declaration:
#     subroutine pstr(s) bind(c,name='pstr')
    void pstr(const char* s)
"""
    mlist.write_text(i_data)
    data = Fortran2CHeader(mlist, signed_to_unsigned_char=True)
    data.parse()
    data.gen_chead(hStringIO)
    res = hStringIO.read_text()
    for i, j in zip(res.split("\n"), exp.split("\n")):
        if i.startswith("  Generated"):
            continue
        assert i == j
    data.gen_pxd(pxdStringIO)
    res = pxdStringIO.read_text()
    for i, j in zip(res.split("\n"), exp_pxd.split("\n")):
        if i.startswith("# from "):
            continue
        if i.startswith("# Generated by"):
            continue
        assert i == j


def test_subr_complex(mlist, hStringIO, pxdStringIO):
    i_data = """
subroutine pstr(s) bind(c,name='pstr')
  use iso_c_binding ! C bindings
  COMPLEX(C_DOUBLE_COMPLEX) :: s
end subroutine pstr
"""
    exp = """\
/*
  test.h
  Header file generated from parsing ISO_C_BINDING information
  from test.h.

  Generated by setup.py, version xx.
 */

#ifndef TEST_H
#define TEST_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/*
  pstr
  Generated from FORTRAN routine 'pstr'
  FORTRAN declaration:
      subroutine pstr(s) bind(c,name='pstr')
 */
extern void pstr(double _Complex s);

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif /* TEST_H */"""

    exp_pxd = """#
# test.pxd
# Cython Header file generated from parsing ISO_C_BINDING information
# from <generator object <genexpr> at 0x????????????>.
#
# Generated by setup.py, version xx.

cdef extern from "test.h" nogil:
# pstr
# Generated from FORTRAN routine 'pstr'
# FORTRAN declaration:
#     subroutine pstr(s) bind(c,name='pstr')
    void pstr(double complex s)
"""
    mlist.write_text(i_data)
    data = Fortran2CHeader(mlist, signed_to_unsigned_char=True)
    data.parse()
    data.gen_chead(hStringIO)
    res = hStringIO.read_text()
    for i, j in zip(res.split("\n"), exp.split("\n")):
        if i.startswith("  Generated"):
            continue
        assert i == j
    res = ()
    data.gen_pxd(pxdStringIO)
    res = pxdStringIO.read_text()
    for i, j in zip(res.split("\n"), exp_pxd.split("\n")):
        if i.startswith("# from "):
            continue
        if i.startswith("# Generated by"):
            continue
        assert i == j
