[tool.poetry]
name = "Fortran2CHeader"
version = "0.6.6"
description = "Generate a C/C++ header file from a Fortran source file."
packages = [{ include = "dnvgl" }]
exclude = ["**/.#*.py", "**/#*.py#"]

authors = ["Berthold HÃ¶llmann <berthold@xn--hllmanns-n4a.de>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
rich = "^13.9.2"

[tool.poetry.group.dev.dependencies]
black = "*"
ipython = "*"
mypy = "*"
pdbp = "*"
pytest = "*"
pytest-benchmark = "*"
pytest-black-ng = "*"
pytest-cache = "*"
pytest-cov = "*"
pytest-isort = "*"
pytest-mock = "*"
pytest-ruff = "*"
pytest-runner = "*"
pytest-sugar = "*"
rope = "*"
ruff = "*"
sphinx-argparse-cli = "*"
tox = "*"
xdoctest = "*"

[tool.poetry.scripts]
fortran2cheader = "dnvgl.fortran2cheader:main"

[tool.isort]
dedup_headings = true
include_trailing_comma = true
float_to_top = true
namespace_packages = ['dnvgl']
force_grid_wrap = 0
balanced_wrapping = true
use_parentheses = true
length_sort = true
line_length = 88
combine_as_imports = true
known_first_party = ["dnvgl"]
known_third_party = ["pytest"]

[tool.ruff]
namespace-packages = ["docs", 'dnvgl']
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
ignore = ["ANN101", "D211", "D213", "RUF200", "ISC001", "COM812"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
force-sort-within-sections = true
force-wrap-aliases = true
combine-as-imports = true
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]
default-section = "third-party"
known-first-party = ["dnvgl"]
known-third-party = ["pytest"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/.stubs/"

[tool.tox]
legacy_tox_ini = """

[tox]
isolated_build = true
skip_missing_interpreters = true
envlist = py{39, 310, 311, 312, 313}

[testenv]
deps =
   pdbpp
   pytest
   pytest-benchmark
   pytest-cov
   pytest-mock
   pytest-ruff
   pytest-runner
   pytest-sugar
   rope
   toml
   xdoctest

whitelist_externals = poetry

commands =
   pytest                                                    \
        --doctest-modules                                    \
        --junitxml=ctitools-report.xml                       \
        --cov dnvgl/                                       \
        --cov-report term --cov-report html --cov-report xml \
        --cov-report annotate --cov-report term-missing      \
        dnvgl
"""

[tool.pytest.ini_options]
junit_family = "xunit2"
doctest_encoding = "UTF-8"
minversion = "7.0"
addopts = [
    "--import-mode=importlib",
    "--doctest-modules",
    "--ff",
    "--pdb",
    "--cov=dnvgl",
    "--cov-report=term",
    "--cov-report=html",
    "--cov-branch",
    "--ruff",
    "--verbose", "--verbose", "--verbose",
    #"--cov-config .coveragerc",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=annotate",
    "--doctest-modules",
    "--capture=no",
    "--junitxml=pytest_main.xml",
    "--ignore=doc",
    "--ignore=build_exe",
    "--ignore=.svn",
    "--ignore=.venv",
    "--ignore=data",
    "--ignore=htmlcov",
    "--ignore=__pycache__"]
testpaths = ["dnvgl"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
